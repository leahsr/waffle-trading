package de.thws.repository

import de.thws.database.TransactionUtils
import de.thws.domain.*
import de.thws.repository.constants.{Properties, Tables}

import java.sql.{Connection, Timestamp}
import scala.collection.mutable.ListBuffer

trait WaffleTransactionsRepositoryComponent {
  val waffleTransactionsRepository: WaffleTransactionsRepository
}

class WaffleTransactionsRepository {
  def add(waffleTransaction: WaffleTransaction, transaction: Connection): Unit = {
    // Only new transactions make sense here, because id is generated by database
    assert(waffleTransaction.id.isEmpty)

    val add =
      s"""
         |INSERT INTO ${Tables.Transaction} (
         |  ${Properties.WaffleTransaction.timestamp},
         |  ${Properties.WaffleTransaction.transactionType},
         |  ${Properties.WaffleTransaction.price},
         |  ${Properties.WaffleTransaction.quantity},
         |  ${Properties.WaffleTransaction.userName}
         |)
         |VALUES (?,?,?,?,?)
         |""".stripMargin

    println(waffleTransaction.transactionType.value)

    TransactionUtils.execute(add, transaction) { prepare =>
      prepare.setTimestamp(1, Timestamp.from(waffleTransaction.timestamp))
      prepare.setObject(2, waffleTransaction.transactionType.pgEnum())
      prepare.setDouble(3, waffleTransaction.price.value)
      prepare.setInt(4, waffleTransaction.quantity.value)
      prepare.setString(5, waffleTransaction.userName.value)
    }
  }

  def waffleTransactions(userName: UserName, transaction: Connection): WaffleTransactions = {
    val select =
      s"""
         |SELECT
         |  ${Properties.WaffleTransaction.id},
         |  ${Properties.WaffleTransaction.timestamp},
         |  ${Properties.WaffleTransaction.transactionType},
         |  ${Properties.WaffleTransaction.price},
         |  ${Properties.WaffleTransaction.quantity},
         |  ${Properties.WaffleTransaction.userName}
         |FROM ${Tables.Transaction}
         |WHERE ${Properties.WaffleTransaction.userName} ILIKE ?
         |""".stripMargin

    TransactionUtils.executeQuery(select, transaction)(
      { prepare =>
        prepare.setString(1, userName.value)
      },
      { resultSet =>
        val waffleTransactions = ListBuffer[WaffleTransaction]()
        while (resultSet.next()) {
          waffleTransactions.append(
            WaffleTransaction(
              Option(TransactionId(resultSet.getInt(Properties.WaffleTransaction.id))),
              resultSet.getTimestamp(Properties.WaffleTransaction.timestamp).toInstant,
              WaffleTransactionType(resultSet.getString(Properties.WaffleTransaction.transactionType)),
              TransactionPrice(resultSet.getDouble(Properties.WaffleTransaction.price)),
              TransactionQuantity(resultSet.getInt(Properties.WaffleTransaction.quantity)),
              UserName(resultSet.getString(Properties.WaffleTransaction.userName)),
            )
          )
        }
        WaffleTransactions.from(waffleTransactions)
      }
    )
  }
}

object WaffleTransactionsRepository {

  def build(): WaffleTransactionsRepository = new WaffleTransactionsRepository
}
